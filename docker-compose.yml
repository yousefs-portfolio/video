version: '3.8'

services:
  # PostgreSQL for main application data
  postgres:
    image: postgres:15-alpine
    container_name: video-platform-postgres
    environment:
      POSTGRES_DB: video_platform
      POSTGRES_USER: admin
      POSTGRES_PASSWORD: secure_password_123
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./scripts/postgres-init.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - video-platform-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U admin -d video_platform"]
      interval: 10s
      timeout: 5s
      retries: 5

  # MongoDB for analytics and unstructured data
  mongodb:
    image: mongo:7.0
    container_name: video-platform-mongodb
    environment:
      MONGO_INITDB_ROOT_USERNAME: admin
      MONGO_INITDB_ROOT_PASSWORD: secure_password_123
      MONGO_INITDB_DATABASE: video_analytics
    ports:
      - "27017:27017"
    volumes:
      - mongodb_data:/data/db
      - ./scripts/mongodb-init.js:/docker-entrypoint-initdb.d/init.js
    networks:
      - video-platform-network
    healthcheck:
      test: echo 'db.runCommand("ping").ok' | mongosh localhost:27017/test --quiet
      interval: 10s
      timeout: 5s
      retries: 5

  # TimescaleDB for time-series engagement data
  timescaledb:
    image: timescale/timescaledb:latest-pg15
    container_name: video-platform-timescale
    environment:
      POSTGRES_DB: video_metrics
      POSTGRES_USER: admin
      POSTGRES_PASSWORD: secure_password_123
    ports:
      - "5433:5432"
    volumes:
      - timescale_data:/var/lib/postgresql/data
      - ./scripts/timescale-init.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - video-platform-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U admin -d video_metrics"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis for caching and session management
  redis:
    image: redis:7-alpine
    container_name: video-platform-redis
    command: redis-server --appendonly yes --requirepass secure_password_123
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - video-platform-network
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Elasticsearch for full-text search
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.11.0
    container_name: video-platform-elasticsearch
    environment:
      - discovery.type=single-node
      - xpack.security.enabled=false
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
    ports:
      - "9200:9200"
    volumes:
      - elasticsearch_data:/usr/share/elasticsearch/data
    networks:
      - video-platform-network
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:9200/_cluster/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 5

  # MinIO for S3-compatible object storage (local development)
  minio:
    image: minio/minio:latest
    container_name: video-platform-minio
    command: server /data --console-address ":9001"
    environment:
      MINIO_ROOT_USER: minio_admin
      MINIO_ROOT_PASSWORD: secure_password_123
    ports:
      - "9000:9000"
      - "9001:9001"
    volumes:
      - minio_data:/data
    networks:
      - video-platform-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 30s
      timeout: 20s
      retries: 3

  # Adminer for database management
  adminer:
    image: adminer:latest
    container_name: video-platform-adminer
    ports:
      - "8080:8080"
    networks:
      - video-platform-network
    depends_on:
      - postgres
      - mongodb

networks:
  video-platform-network:
    driver: bridge

volumes:
  postgres_data:
    driver: local
  mongodb_data:
    driver: local
  timescale_data:
    driver: local
  redis_data:
    driver: local
  elasticsearch_data:
    driver: local
  minio_data:
    driver: local